apply from: "../gradle/java.gradle"
apply from: "../gradle/versions.gradle"

repositories {
  mavenCentral()
}

ext {
  flyway_version = "4.2.0"
  mysql_version = "6.0.6"
}

sourceSets {
  jooq {
    java {
      srcDir "${projectDir}/src/jooq/java"
    }
  }

  test {
    java {
      compileClasspath += jooq.output
      runtimeClasspath += jooq.output
    }
  }
}

dependencies {
  compile "org.jooq:jooq:${jooq_version}"
  compile "io.prometheus:simpleclient:${prometheus_version}"
  compile "io.opentracing:opentracing-api:${opentracing_version}"
  compile "io.opentracing:opentracing-util:${opentracing_version}"

  compileOnly "org.jetbrains:annotations:${jetbrains_annotations_version}"
  testCompileOnly "org.jetbrains:annotations:${jetbrains_annotations_version}"

  testCompile "ch.qos.logback:logback-classic:${logback_version}"
  testCompile "io.opentracing:opentracing-mock:${opentracing_version}"
  testCompile "mysql:mysql-connector-java:${mysql_version}"

  jooqCompile "org.jooq:jooq-meta:${jooq_version}"
  jooqCompile "org.jooq:jooq-codegen:${jooq_version}"
}

task dbMigrate(type: JavaExec) {
  description "Create database tables"
  group "db"
  classpath = sourceSets.jooq.runtimeClasspath + sourceSets.test.runtimeClasspath
  main = "me.dmexe.telemetry.jooq.CreateTables"
}

task jooqSchemaGen(type: JavaExec) {
  description "Generating jooq XMl schema"
  group "db"

  classpath = sourceSets.jooq.runtimeClasspath + sourceSets.test.runtimeClasspath

  main = 'org.jooq.util.GenerationTool'

  args "${projectDir}/src/jooq/resources/jooq.xml"

  doFirst {
    println "\nExecuting JOOQ with: $args \n"
  }
}

jooqSchemaGen.dependsOn(dbMigrate)
test.dependsOn(dbMigrate)
